package fpt.aptech.management_field.services;

import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class SystemMessageService {
    
    private final Map<String, String> systemMessages;
    
    public SystemMessageService() {
        this.systemMessages = new HashMap<>();
        initializeSystemMessages();
    }
    
    private void initializeSystemMessages() {
        // Greeting messages
        systemMessages.put("greeting", "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa h·ªá th·ªëng ƒë·∫∑t s√¢n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n" +
                "‚Ä¢ Ki·ªÉm tra gi√° s√¢n\n" +
                "‚Ä¢ T√¨m ƒë·ªãa ƒëi·ªÉm s√¢n\n" +
                "‚Ä¢ Xem l·ªãch tr·ªëng\n" +
                "‚Ä¢ ƒê·∫∑t s√¢n\n" +
                "‚Ä¢ Qu·∫£n l√Ω booking\n\n" +
                "B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ ·∫°?");
        
        systemMessages.put("goodbye", "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•! Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫≠n ƒë·∫•u vui v·∫ª! üëã");
        
        systemMessages.put("thanks", "Kh√¥ng c√≥ g√¨ ·∫°! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n. B·∫°n c√≤n c·∫ßn h·ªó tr·ª£ g√¨ kh√°c kh√¥ng?");
        
        // Error messages
        systemMessages.put("error.general", "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
        
        systemMessages.put("error.ai_service", "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.");
        
        // Clarification questions
        systemMessages.put("clarify.field_type", "B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ lo·∫°i s√¢n n√†o? (S√¢n 5 ng∆∞·ªùi, 7 ng∆∞·ªùi, 11 ng∆∞·ªùi, c·∫ßu l√¥ng, tennis, b√≥ng r·ªï)");
        
        systemMessages.put("clarify.location", "B·∫°n mu·ªën t√¨m s√¢n ·ªü khu v·ª±c n√†o?");
        
        systemMessages.put("clarify.time", "B·∫°n mu·ªën ƒë·∫∑t s√¢n v√†o th·ªùi gian n√†o? (V√≠ d·ª•: t·ªëi mai, 19h ng√†y 15/8)");
        
        systemMessages.put("clarify.date", "B·∫°n mu·ªën ƒë·∫∑t s√¢n v√†o ng√†y n√†o?");
        
        // Insufficient information messages
        systemMessages.put("insufficient.booking_info", "ƒê·ªÉ ƒë·∫∑t s√¢n, t√¥i c·∫ßn th√™m th√¥ng tin:\n" +
                "‚Ä¢ Lo·∫°i s√¢n\n" +
                "‚Ä¢ Th·ªùi gian\n" +
                "‚Ä¢ ƒê·ªãa ƒëi·ªÉm (n·∫øu c√≥)\n\n" +
                "B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin n√†y kh√¥ng?");
        
        systemMessages.put("insufficient.availability_info", "ƒê·ªÉ ki·ªÉm tra l·ªãch tr·ªëng, t√¥i c·∫ßn:\n" +
                "‚Ä¢ Lo·∫°i s√¢n\n" +
                "‚Ä¢ Ng√†y mu·ªën ƒë·∫∑t\n\n" +
                "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m kh√¥ng?");
        
        // Fallback message
        systemMessages.put("fallback", "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?\n\n" +
                "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n" +
                "‚Ä¢ Xem gi√° s√¢n\n" +
                "‚Ä¢ T√¨m ƒë·ªãa ƒëi·ªÉm\n" +
                "‚Ä¢ Ki·ªÉm tra l·ªãch tr·ªëng\n" +
                "‚Ä¢ ƒê·∫∑t s√¢n\n" +
                "‚Ä¢ Qu·∫£n l√Ω booking");
    }
    
    public String getMessage(String key) {
        return systemMessages.getOrDefault(key, systemMessages.get("fallback"));
    }
    
    public String getMessage(String key, Object... params) {
        String message = getMessage(key);
        return String.format(message, params);
    }
    
    public void updateMessage(String key, String message) {
        systemMessages.put(key, message);
    }
}