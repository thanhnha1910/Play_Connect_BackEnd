package fpt.aptech.management_field.services;

import fpt.aptech.management_field.models.ConversationContext;
import fpt.aptech.management_field.models.Field;
import fpt.aptech.management_field.models.Location;
import fpt.aptech.management_field.payload.dtos.*;
import fpt.aptech.management_field.repositories.FieldRepository;
import fpt.aptech.management_field.repositories.LocationRepository;
import fpt.aptech.management_field.repositories.TournamentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;
import java.util.function.Function;

@Service
public class ChatbotService {

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private FieldRepository fieldRepository;

    @Autowired
    private LocationRepository locationRepository;
    
    @Autowired
    private ConversationContextService contextService;
    
    @Autowired
    private SystemMessageService messageService;
    
    @Autowired
    private BookingService bookingService;
    
    @Autowired
    private FieldService fieldService;
    
    @Autowired
    private TournamentRepository tournamentRepository;

    @Value("${ai.service.url:http://localhost:5002}")
    private String aiServiceUrl;

    public ChatbotResponseDTO processMessage(ChatbotRequestDTO request) {
        try {
            String sessionId = request.getSessionId();
            if (sessionId == null || sessionId.isEmpty()) {
                sessionId = contextService.generateSessionId();
            }
            
            // L·∫•y context hi·ªán t·∫°i
            ConversationContext context = contextService.getContext(sessionId);
            
            // G·ªçi AI Service ƒë·ªÉ nh·∫≠n di·ªán intent v√† entities
            AiRequestV2DTO aiRequest = new AiRequestV2DTO();
            aiRequest.setMessage(request.getMessage());
            aiRequest.setContext(context.getEntities());
            
            String url = aiServiceUrl + "/predict";
            AiResponseV2DTO aiResponse = restTemplate.postForObject(url, aiRequest, AiResponseV2DTO.class);
            
            if (aiResponse == null) {
                return createErrorResponse(sessionId, messageService.getMessage("error.ai_service"));
            }
            
            // C·∫≠p nh·∫≠t context v·ªõi intent v√† entities m·ªõi
            context = contextService.updateContext(sessionId, aiResponse.getIntent(), 
                    aiResponse.getEntities(), request.getMessage());
            
            // X·ª≠ l√Ω logic nghi·ªáp v·ª• d·ª±a tr√™n intent v√† context
            return processIntentWithContext(aiResponse, context);
            
        } catch (Exception e) {
            String sessionId = request.getSessionId() != null ? request.getSessionId() : contextService.generateSessionId();
            return createErrorResponse(sessionId, messageService.getMessage("error.general"));
        }
    }

    private ChatbotResponseDTO processIntentWithContext(AiResponseV2DTO aiResponse, ConversationContext context) {
        String intent = aiResponse.getIntent();
        String sessionId = context.getSessionId();
        
        switch (intent) {
            case "greeting":
                return createSimpleResponse(sessionId, messageService.getMessage("greeting"), context.getEntities());
            case "goodbye":
                contextService.clearContext(sessionId);
                return createSimpleResponse(sessionId, messageService.getMessage("goodbye"), new HashMap<>());
            case "thanks":
                return createSimpleResponse(sessionId, messageService.getMessage("thanks"), context.getEntities());
            case "price_inquiry":
                return handlePriceInquiry(context);
            case "location_inquiry":
                return handleLocationInquiry(context);
            case "operating_hours":
                return handleOperatingHours(context);
            case "availability_inquiry":
                return handleAvailabilityInquiry(context);
            case "amenities_inquiry":
                return handleAmenitiesInquiry(context);
            case "booking_management":
                return handleBookingManagement(context);
            case "payment_methods":
                return handlePaymentMethods(context);
            case "booking_instruction":
                return handleBookingInstruction(context);
            case "tournament_inquiry":
                return handleTournamentInquiry(context);
            case "tournament_schedule":
                return handleTournamentSchedule(context);
            case "tournament_registration":
                return handleTournamentRegistration(context);
            case "tournament_fee_inquiry":
                return handleTournamentFeeInquiry(context);
            case "tournament_prize":
                return handleTournamentPrize(context);
            default:
                return createSimpleResponse(sessionId, messageService.getMessage("fallback"), context.getEntities());
        }
    }
    
    private ChatbotResponseDTO createErrorResponse(String sessionId, String message) {
        ChatbotResponseDTO response = new ChatbotResponseDTO();
        response.setText(message);
        response.setSessionId(sessionId);
        response.setActions(new ArrayList<>());
        response.setContext(new HashMap<>());
        return response;
    }
    
    private ChatbotResponseDTO createSimpleResponse(String sessionId, String text, Map<String, Object> entities) {
        ChatbotResponseDTO response = new ChatbotResponseDTO();
        response.setText(text);
        response.setSessionId(sessionId);
        response.setActions(new ArrayList<>());
        response.setContext(entities);
        return response;
    }

    private ChatbotResponseDTO handlePriceInquiry(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        try {
            String fieldType = (String) entities.get("field_type");
            String location = (String) entities.get("location");
            
            // Case 1: C√≥ c·∫£ field_type v√† location
            if (fieldType != null && location != null) {
                return handleSpecificPriceInquiry(sessionId, fieldType, location, entities);
            }
            
            // Case 2: Ch·ªâ c√≥ field_type
            if (fieldType != null) {
                return handleFieldTypePriceInquiry(sessionId, fieldType, entities);
            }
            
            // Case 3: Ch·ªâ c√≥ location
            if (location != null) {
                return handleLocationPriceInquiry(sessionId, location, entities);
            }
            
            // Case 4: Kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ - tr·∫£ v·ªÅ b·∫£ng gi√° t·ªïng qu√°t
            return handleGeneralPriceInquiry(sessionId, entities);
            
        } catch (Exception e) {
            System.err.println("Error in handlePriceInquiry: " + e.getMessage());
            return createSimpleResponse(sessionId, 
                "Xin l·ªói, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin gi√° l√∫c n√†y. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n.", 
                entities);
        }
    }

    private ChatbotResponseDTO handleSpecificPriceInquiry(String sessionId, String fieldType, String location, Map<String, Object> entities) {
        List<Field> fields = findFields(fieldType, location);
        
        if (fields.isEmpty()) {
            // Kh√¥ng t√¨m th·∫•y s√¢n ph√π h·ª£p
            return createClarificationResponse(sessionId, 
                String.format("Hi·ªán t·∫°i ch√∫ng t√¥i ch∆∞a c√≥ s√¢n %s t·∫°i %s. B·∫°n c√≥ mu·ªën xem c√°c s√¢n kh√°c kh√¥ng?", fieldType, location),
                getSuggestedAlternatives(fieldType, location),
                "field_suggestion",
                entities);
        }
        
        if (fields.size() == 1) {
            // T√¨m th·∫•y ƒë√∫ng 1 s√¢n
            Field field = fields.get(0);
            String message = String.format(
                "D·∫°, s√¢n %s t·∫°i %s c√≥ gi√° %,.0f VNƒê/gi·ªù.\n" +
                "üìç ƒê·ªãa ch·ªâ: %s\n" +
                "‚öΩ S·ª©c ch·ª©a: %d ng∆∞·ªùi\n" +
                "B·∫°n c√≥ mu·ªën ƒë·∫∑t s√¢n n√†y kh√¥ng?",
                field.getType().getName(),
                field.getLocation().getName(),
                field.getHourlyRate(),
                field.getLocation().getAddress(),
                field.getType().getMaxCapacity()
            );
            
            // Th√™m action buttons
            ChatbotResponseDTO response = createSimpleResponse(sessionId, message, entities);
            List<ChatbotResponseDTO.ActionDTO> actions = new ArrayList<>();
            
            ChatbotResponseDTO.ActionDTO bookAction = new ChatbotResponseDTO.ActionDTO();
            bookAction.setLabel("ƒê·∫∑t s√¢n ngay");
            bookAction.setType("action");
            Map<String, Object> bookPayload = new HashMap<>();
            bookPayload.put("action", "book_field");
            bookPayload.put("fieldId", field.getFieldId().toString());
            bookAction.setPayload(bookPayload);
            actions.add(bookAction);
            
            ChatbotResponseDTO.ActionDTO detailAction = new ChatbotResponseDTO.ActionDTO();
            detailAction.setLabel("Xem chi ti·∫øt");
            detailAction.setType("action");
            Map<String, Object> detailPayload = new HashMap<>();
            detailPayload.put("action", "view_details");
            detailPayload.put("fieldId", field.getFieldId().toString());
            detailAction.setPayload(detailPayload);
            actions.add(detailAction);
            
            response.setActions(actions);
            return response;
        }
        
        // T√¨m th·∫•y nhi·ªÅu s√¢n - hi·ªÉn th·ªã danh s√°ch
        return createMultipleFieldsResponse(sessionId, fields, fieldType, location, entities);
    }

    private ChatbotResponseDTO handleFieldTypePriceInquiry(String sessionId, String fieldType, Map<String, Object> entities) {
        List<Field> fields = findFields(fieldType, null);
        
        if (fields.isEmpty()) {
            return createSimpleResponse(sessionId, 
                String.format("Hi·ªán t·∫°i ch√∫ng t√¥i ch∆∞a c√≥ s√¢n %s. B·∫°n c√≥ mu·ªën xem c√°c lo·∫°i s√¢n kh√°c kh√¥ng?", fieldType), 
                entities);
        }
        
        // Group by location ƒë·ªÉ hi·ªÉn th·ªã gi√° theo t·ª´ng ƒë·ªãa ƒëi·ªÉm
        Map<String, List<Field>> fieldsByLocation = fields.stream()
            .collect(Collectors.groupingBy(field -> field.getLocation().getName()));
        
        StringBuilder message = new StringBuilder();
        message.append(String.format("Gi√° s√¢n %s t·∫°i c√°c ƒë·ªãa ƒëi·ªÉm:\n\n", fieldType));
        
        fieldsByLocation.forEach((locationName, locationFields) -> {
            message.append(String.format("üìç %s:\n", locationName));
            locationFields.forEach(field -> {
                message.append(String.format("   ‚Ä¢ %s: %,.0f VNƒê/gi·ªù\n", 
                    field.getType().getName(), field.getHourlyRate()));
            });
            message.append("\n");
        });
        
        message.append("B·∫°n mu·ªën xem chi ti·∫øt s√¢n n√†o?");
        
        return createSimpleResponse(sessionId, message.toString(), entities);
    }

    private ChatbotResponseDTO handleLocationPriceInquiry(String sessionId, String location, Map<String, Object> entities) {
        List<Field> fields = findFields(null, location);
        
        if (fields.isEmpty()) {
            return createSimpleResponse(sessionId, 
                String.format("Hi·ªán t·∫°i ch√∫ng t√¥i ch∆∞a c√≥ s√¢n t·∫°i %s. B·∫°n c√≥ mu·ªën xem c√°c ƒë·ªãa ƒëi·ªÉm kh√°c kh√¥ng?", location), 
                entities);
        }
        
        // Group by field type
        Map<String, List<Field>> fieldsByType = fields.stream()
            .collect(Collectors.groupingBy(field -> field.getType().getName()));
        
        StringBuilder message = new StringBuilder();
        message.append(String.format("B·∫£ng gi√° c√°c s√¢n t·∫°i %s:\n\n", location));
        
        fieldsByType.forEach((typeName, typeFields) -> {
            double avgPrice = typeFields.stream()
                .mapToDouble(Field::getHourlyRate)
                .average()
                .orElse(0);
            
            message.append(String.format("‚öΩ %s: %,.0f VNƒê/gi·ªù\n", typeName, avgPrice));
        });
        
        message.append("\nB·∫°n mu·ªën ƒë·∫∑t lo·∫°i s√¢n n√†o?");
        
        return createSimpleResponse(sessionId, message.toString(), entities);
    }

    private ChatbotResponseDTO handleGeneralPriceInquiry(String sessionId, Map<String, Object> entities) {
        List<Field> allFields = fieldRepository.findAll();
        
        if (allFields.isEmpty()) {
            return createSimpleResponse(sessionId, 
                "Hi·ªán t·∫°i h·ªá th·ªëng ch∆∞a c√≥ th√¥ng tin s√¢n. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp.", 
                entities);
        }
        
        // Group by field type v√† t√≠nh gi√° trung b√¨nh
        Map<String, Double> avgPricesByType = allFields.stream()
            .collect(Collectors.groupingBy(
                field -> field.getType().getName(),
                Collectors.averagingDouble(Field::getHourlyRate)
            ));
        
        StringBuilder message = new StringBuilder();
        message.append("üìã B·∫£ng gi√° s√¢n c·ªßa ch√∫ng t√¥i:\n\n");
        
        avgPricesByType.entrySet().stream()
            .sorted(Map.Entry.comparingByValue())
            .forEach(entry -> {
                message.append(String.format("‚öΩ %s: t·ª´ %,.0f VNƒê/gi·ªù\n", 
                    entry.getKey(), entry.getValue()));
            });
        
        message.append("\nüí° Gi√° c√≥ th·ªÉ kh√°c nhau t√πy theo ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian.\n");
        message.append("B·∫°n mu·ªën xem gi√° c·ª• th·ªÉ cho lo·∫°i s√¢n n√†o?");
        
        return createSimpleResponse(sessionId, message.toString(), entities);
    }

    private List<String> getSuggestedAlternatives(String fieldType, String location) {
        List<String> suggestions = new ArrayList<>();
        
        // T√¨m field types t∆∞∆°ng t·ª±
        List<Field> similarFields = fieldRepository.findAll().stream()
            .filter(field -> field.getType().getName().toLowerCase().contains(fieldType.toLowerCase().substring(0, Math.min(3, fieldType.length()))))
            .limit(3)
            .collect(Collectors.toList());
        
        similarFields.forEach(field -> {
            suggestions.add(String.format("%s t·∫°i %s", 
                field.getType().getName(), field.getLocation().getName()));
        });
        
        // T√¨m locations t∆∞∆°ng t·ª±
        List<Field> nearbyFields = fieldRepository.findAll().stream()
            .filter(field -> field.getLocation().getName().toLowerCase().contains(location.toLowerCase().substring(0, Math.min(3, location.length()))))
            .limit(2)
            .collect(Collectors.toList());
        
        nearbyFields.forEach(field -> {
            suggestions.add(String.format("%s t·∫°i %s", 
                field.getType().getName(), field.getLocation().getName()));
        });
        
        return suggestions.stream().distinct().limit(5).collect(Collectors.toList());
    }

    private ChatbotResponseDTO createMultipleFieldsResponse(String sessionId, List<Field> fields, 
            String fieldType, String location, Map<String, Object> entities) {
        
        StringBuilder message = new StringBuilder();
        message.append(String.format("T√¨m th·∫•y %d s√¢n %s t·∫°i %s:\n\n", 
            fields.size(), fieldType, location));
        
        fields.stream().limit(5).forEach(field -> {
            message.append(String.format("üèüÔ∏è %s\n", field.getType().getName()));
            message.append(String.format("   üí∞ Gi√°: %,.0f VNƒê/gi·ªù\n", field.getHourlyRate()));
            message.append(String.format("   üìç %s\n", field.getLocation().getAddress()));
            message.append(String.format("   üë• S·ª©c ch·ª©a: %d ng∆∞·ªùi\n\n", field.getType().getMaxCapacity()));
        });
        
        if (fields.size() > 5) {
            message.append(String.format("... v√† %d s√¢n kh√°c\n\n", fields.size() - 5));
        }
        
        message.append("B·∫°n mu·ªën ƒë·∫∑t s√¢n n√†o?");
        
        ChatbotResponseDTO response = createSimpleResponse(sessionId, message.toString(), entities);
        
        // Th√™m action buttons cho t·ª´ng s√¢n
        List<ChatbotResponseDTO.ActionDTO> actions = new ArrayList<>();
        fields.stream().limit(3).forEach(field -> {
            ChatbotResponseDTO.ActionDTO action = new ChatbotResponseDTO.ActionDTO();
            action.setLabel(String.format("ƒê·∫∑t %s", field.getType().getName()));
            action.setType("action");
            Map<String, Object> payload = new HashMap<>();
            payload.put("action", "book_field");
            payload.put("fieldId", field.getFieldId().toString());
            action.setPayload(payload);
            actions.add(action);
        });
        
        ChatbotResponseDTO.ActionDTO viewAllAction = new ChatbotResponseDTO.ActionDTO();
        viewAllAction.setLabel("Xem t·∫•t c·∫£");
        viewAllAction.setType("action");
        Map<String, Object> viewAllPayload = new HashMap<>();
        viewAllPayload.put("action", "view_all");
        viewAllAction.setPayload(viewAllPayload);
        actions.add(viewAllAction);
        
        response.setActions(actions);
        return response;
    }

    private ChatbotResponseDTO handleLocationInquiry(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        try {
            List<Location> locations = locationRepository.findAll();
            
            if (!locations.isEmpty()) {
                StringBuilder locationList = new StringBuilder("Danh s√°ch ƒë·ªãa ch·ªâ c√°c s√¢n c·ªßa ch√∫ng t√¥i:\n");
                locations.stream()
                   // Gi·ªõi h·∫°n 5 ƒë·ªãa ƒëi·ªÉm ƒë·∫ßu ti√™n
                    .forEach(location -> locationList.append(String.format("üìç %s - %s\n", 
                        location.getName(), location.getAddress())));
                locationList.append("B·∫°n mu·ªën xem chi ti·∫øt v·ªÅ ƒë·ªãa ƒëi·ªÉm n√†o?");
                return createSimpleResponse(sessionId, locationList.toString(), entities);
            }
        } catch (Exception e) {
            // Log error here
        }
        
        return createSimpleResponse(sessionId, 
            "Xin l·ªói, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë·ªãa ch·ªâ l√∫c n√†y. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.", 
            entities);
    }

    private ChatbotResponseDTO handleOperatingHours(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String message = "üïê Gi·ªù ho·∫°t ƒë·ªông c·ªßa ch√∫ng t√¥i:\n" +
               "- Th·ª© 2 - Th·ª© 6: 6:00 - 22:00\n" +
               "- Th·ª© 7 - Ch·ªß nh·∫≠t: 5:30 - 23:00\n" +
               "- L·ªÖ T·∫øt: 7:00 - 21:00\n\n" +
               "B·∫°n c√≥ mu·ªën ƒë·∫∑t s√¢n trong khung gi·ªù n√†o kh√¥ng?";
        
        return createSimpleResponse(sessionId, message, entities);
    }

    private ChatbotResponseDTO handleAvailabilityInquiry(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String message = "ƒê·ªÉ ki·ªÉm tra l·ªãch tr·ªëng, b·∫°n vui l√≤ng:\n" +
               "1. Truy c·∫≠p trang web c·ªßa ch√∫ng t√¥i\n" +
               "2. Ch·ªçn s√¢n v√† ng√†y mu·ªën ƒë·∫∑t\n" +
               "3. H·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã c√°c khung gi·ªù c√≤n tr·ªëng\n\n" +
               "Ho·∫∑c b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c·ª• th·ªÉ ng√†y v√† gi·ªù mu·ªën ƒë·∫∑t ƒë·ªÉ t√¥i h·ªó tr·ª£ ki·ªÉm tra.";
        
        return createSimpleResponse(sessionId, message, entities);
    }

    private ChatbotResponseDTO handleAmenitiesInquiry(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String message = "üèüÔ∏è Ti·ªán √≠ch t·∫°i s√¢n c·ªßa ch√∫ng t√¥i:\n" +
               "‚úÖ Cho thu√™ b√≥ng v√† d·ª•ng c·ª• th·ªÉ thao\n" +
               "‚úÖ B√£i ƒë·ªó xe mi·ªÖn ph√≠\n" +
               "‚úÖ N∆∞·ªõc u·ªëng v√† ƒë·ªì ƒÉn nh·∫π\n" +
               "‚úÖ WiFi mi·ªÖn ph√≠\n" +
               "‚úÖ Ph√≤ng thay ƒë·ªì v√† t·∫Øm r·ª≠a\n" +
               "‚úÖ Cho thu√™ gi√†y th·ªÉ thao\n\n" +
               "B·∫°n c√≥ c·∫ßn th√™m th√¥ng tin v·ªÅ ti·ªán √≠ch n√†o kh√¥ng?";
        
        return createSimpleResponse(sessionId, message, entities);
    }

    private ChatbotResponseDTO handleBookingManagement(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String message = "üìã Qu·∫£n l√Ω ƒë·∫∑t s√¢n:\n" +
               "‚Ä¢ H·ªßy s√¢n: C√≥ th·ªÉ h·ªßy tr∆∞·ªõc 2 gi·ªù, ho√†n 80% ti·ªÅn\n" +
               "‚Ä¢ ƒê·ªïi gi·ªù: Li√™n h·ªá tr∆∞·ªõc 1 gi·ªù ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£\n" +
               "‚Ä¢ Xem l·ªãch s·ª≠: ƒêƒÉng nh·∫≠p t√†i kho·∫£n > L·ªãch s·ª≠ ƒë·∫∑t s√¢n\n\n" +
               "B·∫°n c·∫ßn h·ªó tr·ª£ thao t√°c n√†o c·ª• th·ªÉ?";
        
        return createSimpleResponse(sessionId, message, entities);
    }

    private ChatbotResponseDTO handlePaymentMethods(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String message = "üí≥ C√°c h√¨nh th·ª©c thanh to√°n:\n" +
               "‚úÖ Ti·ªÅn m·∫∑t t·∫°i s√¢n\n" +
               "‚úÖ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n" +
               "‚úÖ V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay)\n" +
               "‚úÖ Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n" +
               "‚úÖ PayPal\n\n" +
               "B·∫°n mu·ªën thanh to√°n b·∫±ng h√¨nh th·ª©c n√†o?";
        
        return createSimpleResponse(sessionId, message, entities);
    }

    private String extractFieldType(String message) {
        String lowerMessage = message.toLowerCase();
        
        // Patterns ƒë·ªÉ nh·∫≠n di·ªán lo·∫°i s√¢n
        if (lowerMessage.contains("s√¢n 5") || lowerMessage.contains("5 ng∆∞·ªùi")) {
            return "S√¢n 5 ng∆∞·ªùi";
        }
        if (lowerMessage.contains("s√¢n 7") || lowerMessage.contains("7 ng∆∞·ªùi")) {
            return "S√¢n 7 ng∆∞·ªùi";
        }
        if (lowerMessage.contains("s√¢n 11") || lowerMessage.contains("11 ng∆∞·ªùi")) {
            return "S√¢n 11 ng∆∞·ªùi";
        }
        if (lowerMessage.contains("c·∫ßu l√¥ng") || lowerMessage.contains("badminton")) {
            return "C·∫ßu l√¥ng";
        }
        if (lowerMessage.contains("tennis")) {
            return "Tennis";
        }
        if (lowerMessage.contains("b√≥ng r·ªï") || lowerMessage.contains("basketball")) {
            return "B√≥ng r·ªï";
        }
        
        return null;
    }
    
    private List<Field> findFields(String fieldType, String location) {
        List<Field> allFields = fieldRepository.findAll();
        
        return allFields.stream()
                .filter(field -> fieldType == null || isFieldTypeMatch(field.getType().getName(), fieldType))
                .filter(field -> location == null || isLocationMatch(field.getLocation().getName(), location))
                .sorted((f1, f2) -> {
                    // S·∫Øp x·∫øp theo ƒë·ªô t∆∞∆°ng ƒë·ªìng v√† gi√°
                    double score1 = calculateFieldScore(f1, fieldType, location);
                    double score2 = calculateFieldScore(f2, fieldType, location);
                    int scoreCompare = Double.compare(score2, score1); // ƒêi·ªÉm cao h∆°n tr∆∞·ªõc
                    if (scoreCompare != 0) return scoreCompare;
                    return Double.compare(f1.getHourlyRate(), f2.getHourlyRate()); // Gi√° th·∫•p h∆°n tr∆∞·ªõc
                })
                .collect(Collectors.toList());
    }
    
    private boolean isFieldTypeMatch(String actualType, String searchType) {
        if (searchType == null) return true;
        
        String actual = actualType.toLowerCase().trim();
        String search = searchType.toLowerCase().trim();
        
        // Exact match
        if (actual.equals(search)) return true;
        
        // Contains match
        if (actual.contains(search) || search.contains(actual)) return true;
        
        // Fuzzy matching cho c√°c t·ª´ ph·ªï bi·∫øn
        return calculateSimilarity(actual, search) > 0.6;
    }
    
    private boolean isLocationMatch(String actualLocation, String searchLocation) {
        if (searchLocation == null) return true;
        
        String actual = actualLocation.toLowerCase().trim();
        String search = searchLocation.toLowerCase().trim();
        
        // Exact match
        if (actual.equals(search)) return true;
        
        // Contains match
        if (actual.contains(search) || search.contains(actual)) return true;
        
        // Fuzzy matching
        return calculateSimilarity(actual, search) > 0.7;
    }
    
    private double calculateFieldScore(Field field, String fieldType, String location) {
        double score = 0.0;
        
        // ƒêi·ªÉm cho field type match
        if (fieldType != null) {
            score += calculateSimilarity(field.getType().getName().toLowerCase(), fieldType.toLowerCase()) * 0.6;
        }
        
        // ƒêi·ªÉm cho location match
        if (location != null) {
            score += calculateSimilarity(field.getLocation().getName().toLowerCase(), location.toLowerCase()) * 0.4;
        }
        
        return score;
    }
    
    private double calculateSimilarity(String s1, String s2) {
        if (s1 == null || s2 == null) return 0.0;
        if (s1.equals(s2)) return 1.0;
        
        // Levenshtein distance based similarity
        int maxLen = Math.max(s1.length(), s2.length());
        if (maxLen == 0) return 1.0;
        
        int distance = levenshteinDistance(s1, s2);
        return 1.0 - (double) distance / maxLen;
    }
    
    private int levenshteinDistance(String s1, String s2) {
        int[][] dp = new int[s1.length() + 1][s2.length() + 1];
        
        for (int i = 0; i <= s1.length(); i++) {
            dp[i][0] = i;
        }
        
        for (int j = 0; j <= s2.length(); j++) {
            dp[0][j] = j;
        }
        
        for (int i = 1; i <= s1.length(); i++) {
            for (int j = 1; j <= s2.length(); j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]);
                }
            }
        }
        
        return dp[s1.length()][s2.length()];
    }
    
    private ChatbotResponseDTO createClarificationResponse(String sessionId, String message, 
            List<String> options, String entityType, Map<String, Object> entities) {
        ChatbotResponseDTO response = new ChatbotResponseDTO();
        response.setText(message);
        response.setSessionId(sessionId);
        response.setContext(entities);
        
        List<ChatbotResponseDTO.ActionDTO> actions = new ArrayList<>();
        for (String option : options) {
            ChatbotResponseDTO.ActionDTO action = new ChatbotResponseDTO.ActionDTO();
            action.setLabel(option);
            action.setType("quick_reply");
            Map<String, Object> payload = new HashMap<>();
            payload.put(entityType, option.toLowerCase());
            action.setPayload(payload);
            actions.add(action);
        }
        response.setActions(actions);
        
        return response;
    }
    
    private ChatbotResponseDTO handleBookingInstruction(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String message = "üìù H∆∞·ªõng d·∫´n ƒë·∫∑t s√¢n:\n" +
               "1. Truy c·∫≠p trang web ho·∫∑c ·ª©ng d·ª•ng\n" +
               "2. Ch·ªçn lo·∫°i s√¢n v√† ƒë·ªãa ƒëi·ªÉm\n" +
               "3. Ch·ªçn ng√†y v√† gi·ªù mu·ªën ƒë·∫∑t\n" +
               "4. ƒêi·ªÅn th√¥ng tin li√™n h·ªá\n" +
               "5. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n" +
               "6. X√°c nh·∫≠n ƒë·∫∑t s√¢n\n\n" +
               "B·∫°n c√≥ c·∫ßn h·ªó tr·ª£ th√™m v·ªÅ quy tr√¨nh ƒë·∫∑t s√¢n kh√¥ng?";
        
        return createSimpleResponse(sessionId, message, entities);
    }
    
    // ==================== TOURNAMENT INQUIRY METHODS ====================
    
    private ChatbotResponseDTO handleTournamentInquiry(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String tournamentType = (String) entities.get("tournament_type");
        String location = (String) entities.get("location");
        String tournamentName = (String) entities.get("tournament_name");
        
        if (tournamentName != null && !tournamentName.isEmpty()) {
            return handleSpecificTournamentInquiry(sessionId, tournamentName, entities);
        } else if (tournamentType != null && location != null) {
            return handleTournamentByTypeAndLocation(sessionId, tournamentType, location, entities);
        } else if (tournamentType != null) {
            return handleTournamentByType(sessionId, tournamentType, entities);
        } else if (location != null) {
            return handleTournamentByLocation(sessionId, location, entities);
        } else {
            return handleGeneralTournamentInquiry(sessionId, entities);
        }
    }
    
    private ChatbotResponseDTO handleSpecificTournamentInquiry(String sessionId, String tournamentName, Map<String, Object> entities) {
        try {
            List<TournamentDto> tournaments = tournamentRepository.findByNameContainingIgnoreCase(tournamentName);
            
            if (tournaments.isEmpty()) {
                String response = "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y gi·∫£i ƒë·∫•u n√†o c√≥ t√™n \"" + tournamentName + "\".\n" +
                        "B·∫°n c√≥ th·ªÉ xem danh s√°ch c√°c gi·∫£i ƒë·∫•u hi·ªán c√≥ kh√¥ng?";
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("Xem t·∫•t c·∫£ gi·∫£i ƒë·∫•u", "action", Map.of("action", "view_all_tournaments")),
                    new ChatbotResponseDTO.ActionDTO("T√¨m gi·∫£i ƒë·∫•u kh√°c", "action", Map.of("action", "search_tournaments"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
            
            return createTournamentListResponse(sessionId, tournaments, "Th√¥ng tin gi·∫£i ƒë·∫•u \"" + tournamentName + "\":", entities);
            
        } catch (Exception e) {
            return createErrorResponse(sessionId, "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm gi·∫£i ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    
    private ChatbotResponseDTO handleTournamentByTypeAndLocation(String sessionId, String tournamentType, String location, Map<String, Object> entities) {
        try {
            List<TournamentDto> tournaments = tournamentRepository.findByLocationNameContainingIgnoreCase(location);
            
            // Filter by tournament type if needed (based on description or name)
            tournaments = tournaments.stream()
                .filter(t -> isTournamentTypeMatch(t, tournamentType))
                .collect(Collectors.toList());
            
            if (tournaments.isEmpty()) {
                String response = "Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u " + tournamentType + " n√†o t·∫°i " + location + ".\n" +
                        "B·∫°n c√≥ mu·ªën xem c√°c gi·∫£i ƒë·∫•u kh√°c kh√¥ng?";
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("Xem gi·∫£i ƒë·∫•u t·∫°i " + location, "action", Map.of("action", "tournaments_by_location_" + location)),
                    new ChatbotResponseDTO.ActionDTO("Xem gi·∫£i ƒë·∫•u " + tournamentType, "action", Map.of("action", "tournaments_by_type_" + tournamentType)),
                    new ChatbotResponseDTO.ActionDTO("Xem t·∫•t c·∫£ gi·∫£i ƒë·∫•u", "action", Map.of("action", "view_all_tournaments"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
            
            return createTournamentListResponse(sessionId, tournaments, "Gi·∫£i ƒë·∫•u " + tournamentType + " t·∫°i " + location + ":", entities);
            
        } catch (Exception e) {
            return createErrorResponse(sessionId, "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm gi·∫£i ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    
    private ChatbotResponseDTO handleTournamentByType(String sessionId, String tournamentType, Map<String, Object> entities) {
        try {
            List<TournamentDto> allTournaments = tournamentRepository.findAllOrderByStartDate();
            
            // Filter by tournament type
            List<TournamentDto> tournaments = allTournaments.stream()
                .filter(t -> isTournamentTypeMatch(t, tournamentType))
                .collect(Collectors.toList());
            
            if (tournaments.isEmpty()) {
                String response = "Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u " + tournamentType + " n√†o.\n" +
                        "B·∫°n c√≥ mu·ªën xem c√°c lo·∫°i gi·∫£i ƒë·∫•u kh√°c kh√¥ng?";
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("Xem t·∫•t c·∫£ gi·∫£i ƒë·∫•u", "action", Map.of("action", "view_all_tournaments")),
                    new ChatbotResponseDTO.ActionDTO("T√¨m theo ƒë·ªãa ƒëi·ªÉm", "action", Map.of("action", "search_by_location"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
            
            return createTournamentListResponse(sessionId, tournaments, "C√°c gi·∫£i ƒë·∫•u " + tournamentType + ":", entities);
            
        } catch (Exception e) {
            return createErrorResponse(sessionId, "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm gi·∫£i ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    
    private ChatbotResponseDTO handleTournamentByLocation(String sessionId, String location, Map<String, Object> entities) {
        try {
            List<TournamentDto> tournaments = tournamentRepository.findByLocationNameContainingIgnoreCase(location);
            
            if (tournaments.isEmpty()) {
                String response = "Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o t·∫°i " + location + ".\n" +
                        "B·∫°n c√≥ mu·ªën xem gi·∫£i ƒë·∫•u t·∫°i c√°c ƒë·ªãa ƒëi·ªÉm kh√°c kh√¥ng?";
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("Xem t·∫•t c·∫£ gi·∫£i ƒë·∫•u", "action", Map.of("action", "view_all_tournaments")),
                    new ChatbotResponseDTO.ActionDTO("T√¨m theo lo·∫°i gi·∫£i", "action", Map.of("action", "search_by_type"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
            
            return createTournamentListResponse(sessionId, tournaments, "C√°c gi·∫£i ƒë·∫•u t·∫°i " + location + ":", entities);
            
        } catch (Exception e) {
            return createErrorResponse(sessionId, "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm gi·∫£i ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    
    private ChatbotResponseDTO handleGeneralTournamentInquiry(String sessionId, Map<String, Object> entities) {
        try {
            List<TournamentDto> upcomingTournaments = tournamentRepository.findUpcomingTournaments(java.time.LocalDateTime.now());
            
            if (upcomingTournaments.isEmpty()) {
                String response = "Hi·ªán t·∫°i ch∆∞a c√≥ gi·∫£i ƒë·∫•u n√†o s·∫Øp di·ªÖn ra.\n" +
                        "B·∫°n c√≥ mu·ªën xem t·∫•t c·∫£ c√°c gi·∫£i ƒë·∫•u kh√¥ng?";
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("Xem t·∫•t c·∫£ gi·∫£i ƒë·∫•u", "action", Map.of("action", "view_all_tournaments")),
                    new ChatbotResponseDTO.ActionDTO("ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o", "action", Map.of("action", "subscribe_notifications"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
            
            return createTournamentListResponse(sessionId, upcomingTournaments, "C√°c gi·∫£i ƒë·∫•u s·∫Øp di·ªÖn ra:", entities);
            
        } catch (Exception e) {
            return createErrorResponse(sessionId, "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm gi·∫£i ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    
    private ChatbotResponseDTO handleTournamentSchedule(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String tournamentName = (String) entities.get("tournament_name");
        
        if (tournamentName != null && !tournamentName.isEmpty()) {
            List<TournamentDto> tournaments = tournamentRepository.findByNameContainingIgnoreCase(tournamentName);
            
            if (!tournaments.isEmpty()) {
                TournamentDto tournament = tournaments.get(0);
                String response = createTournamentScheduleText(tournament);
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("ƒêƒÉng k√Ω tham gia", "action", Map.of("action", "register_tournament_" + tournament.getTournamentId())),
                    new ChatbotResponseDTO.ActionDTO("Xem chi ti·∫øt", "action", Map.of("action", "view_tournament_details_" + tournament.getTournamentId())),
                    new ChatbotResponseDTO.ActionDTO("Li√™n h·ªá BTC", "action", Map.of("action", "contact_organizer"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
        }
        
        return handleGeneralTournamentInquiry(sessionId, entities);
    }
    
    private ChatbotResponseDTO handleTournamentRegistration(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String response = "ƒê·ªÉ ƒëƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u, b·∫°n c·∫ßn:\n" +
                "1. Ch·ªçn gi·∫£i ƒë·∫•u ph√π h·ª£p\n" +
                "2. Chu·∫©n b·ªã ƒë·ªôi h√¨nh (n·∫øu l√† gi·∫£i ƒë·∫•u ƒë·ªìng ƒë·ªôi)\n" +
                "3. N·ªôp ph√≠ tham gia\n" +
                "4. Ho√†n t·∫•t th·ªß t·ª•c ƒëƒÉng k√Ω\n" +
                "\nB·∫°n mu·ªën ƒëƒÉng k√Ω gi·∫£i ƒë·∫•u n√†o?";
        
        List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
            new ChatbotResponseDTO.ActionDTO("Xem gi·∫£i ƒë·∫•u s·∫Øp t·ªõi", "action", Map.of("action", "view_upcoming_tournaments")),
            new ChatbotResponseDTO.ActionDTO("H∆∞·ªõng d·∫´n ƒëƒÉng k√Ω", "action", Map.of("action", "registration_guide")),
            new ChatbotResponseDTO.ActionDTO("Li√™n h·ªá h·ªó tr·ª£", "action", Map.of("action", "contact_support"))
        );
        
        return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
    }
    
    private ChatbotResponseDTO handleTournamentFeeInquiry(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String tournamentName = (String) entities.get("tournament_name");
        String tournamentType = (String) entities.get("tournament_type");
        
        if (tournamentName != null && !tournamentName.isEmpty()) {
            List<TournamentDto> tournaments = tournamentRepository.findByNameContainingIgnoreCase(tournamentName);
            
            if (!tournaments.isEmpty()) {
                TournamentDto tournament = tournaments.get(0);
                String response = createTournamentFeeText(tournament);
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("ƒêƒÉng k√Ω ngay", "action", Map.of("action", "register_tournament_" + tournament.getTournamentId())),
                    new ChatbotResponseDTO.ActionDTO("Xem chi ti·∫øt", "action", Map.of("action", "view_tournament_details_" + tournament.getTournamentId())),
                    new ChatbotResponseDTO.ActionDTO("So s√°nh gi·∫£i kh√°c", "action", Map.of("action", "compare_tournaments"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
        }
        
        // General fee inquiry
        try {
            List<TournamentDto> allTournaments = tournamentRepository.findAllOrderByStartDate();
            
            if (tournamentType != null) {
                allTournaments = allTournaments.stream()
                    .filter(t -> isTournamentTypeMatch(t, tournamentType))
                    .collect(Collectors.toList());
            }
            
            if (allTournaments.isEmpty()) {
                return createErrorResponse(sessionId, "Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin ph√≠ tham gia cho lo·∫°i gi·∫£i ƒë·∫•u n√†y.");
            }
            
            return createTournamentFeeListResponse(sessionId, allTournaments, entities);
            
        } catch (Exception e) {
            return createErrorResponse(sessionId, "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm th√¥ng tin ph√≠ tham gia.");
        }
    }
    
    private ChatbotResponseDTO handleTournamentPrize(ConversationContext context) {
        String sessionId = context.getSessionId();
        Map<String, Object> entities = context.getEntities();
        
        String tournamentName = (String) entities.get("tournament_name");
        
        if (tournamentName != null && !tournamentName.isEmpty()) {
            List<TournamentDto> tournaments = tournamentRepository.findByNameContainingIgnoreCase(tournamentName);
            
            if (!tournaments.isEmpty()) {
                TournamentDto tournament = tournaments.get(0);
                String response = createTournamentPrizeText(tournament);
                
                List<ChatbotResponseDTO.ActionDTO> actionButtons = Arrays.asList(
                    new ChatbotResponseDTO.ActionDTO("ƒêƒÉng k√Ω tham gia", "action", Map.of("action", "register_tournament_" + tournament.getTournamentId())),
                    new ChatbotResponseDTO.ActionDTO("Xem th·ªÉ th·ª©c", "action", Map.of("action", "view_tournament_format_" + tournament.getTournamentId())),
                    new ChatbotResponseDTO.ActionDTO("Xem gi·∫£i kh√°c", "action", Map.of("action", "view_other_tournaments"))
                );
                
                return new ChatbotResponseDTO(response, actionButtons, sessionId, entities);
            }
        }
        
        // General prize inquiry
        try {
            List<TournamentDto> allTournaments = tournamentRepository.findAllOrderByStartDate();
            
            if (allTournaments.isEmpty()) {
                return createErrorResponse(sessionId, "Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin gi·∫£i th∆∞·ªüng.");
            }
            
            return createTournamentPrizeListResponse(sessionId, allTournaments, entities);
            
        } catch (Exception e) {
            return createErrorResponse(sessionId, "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm th√¥ng tin gi·∫£i th∆∞·ªüng.");
        }
    }
    
    // ==================== TOURNAMENT HELPER METHODS ====================
    
    private boolean isTournamentTypeMatch(TournamentDto tournament, String searchType) {
        if (searchType == null || searchType.isEmpty()) return true;
        
        String name = tournament.getName().toLowerCase();
        String description = tournament.getDescription() != null ? tournament.getDescription().toLowerCase() : "";
        String search = searchType.toLowerCase();
        
        // Check for common tournament types
        if (search.contains("futsal") || search.contains("5 ng∆∞·ªùi")) {
            return name.contains("futsal") || name.contains("5") || description.contains("futsal");
        }
        if (search.contains("b√≥ng ƒë√°") || search.contains("7 ng∆∞·ªùi") || search.contains("11 ng∆∞·ªùi")) {
            return name.contains("b√≥ng ƒë√°") || name.contains("football") || name.contains("7") || name.contains("11");
        }
        if (search.contains("tennis")) {
            return name.contains("tennis") || description.contains("tennis");
        }
        if (search.contains("c·∫ßu l√¥ng") || search.contains("badminton")) {
            return name.contains("c·∫ßu l√¥ng") || name.contains("badminton") || description.contains("c·∫ßu l√¥ng");
        }
        if (search.contains("b√≥ng r·ªï") || search.contains("basketball")) {
            return name.contains("b√≥ng r·ªï") || name.contains("basketball") || description.contains("b√≥ng r·ªï");
        }
        
        return name.contains(search) || description.contains(search);
    }
    
    private ChatbotResponseDTO createTournamentListResponse(String sessionId, List<TournamentDto> tournaments, String title, Map<String, Object> entities) {
        StringBuilder response = new StringBuilder(title + "\n\n");
        List<ChatbotResponseDTO.ActionDTO> actionButtons = new ArrayList<>();
        
        int count = Math.min(tournaments.size(), 5); // Limit to 5 tournaments
        
        for (int i = 0; i < count; i++) {
            TournamentDto tournament = tournaments.get(i);
            response.append("üèÜ ").append(tournament.getName()).append("\n");
            response.append("üìç ").append(tournament.getLocation().getName()).append("\n");
            response.append("üìÖ ").append(formatTournamentDate(tournament)).append("\n");
            response.append("üí∞ Ph√≠ tham gia: ").append(formatPrice(tournament.getEntryFee().doubleValue())).append("\n");
            response.append("üéÅ Gi·∫£i th∆∞·ªüng: ").append(formatPrice(tournament.getPrize().doubleValue())).append("\n");
            response.append("üë• S·ªë l∆∞·ª£ng: ").append(tournament.getSlots()).append(" ƒë·ªôi\n\n");
            
            actionButtons.add(new ChatbotResponseDTO.ActionDTO("ƒêƒÉng k√Ω " + tournament.getName(), "action", Map.of("action", "register_tournament_" + tournament.getTournamentId())));
        }
        
        if (tournaments.size() > 5) {
            response.append("... v√† ").append(tournaments.size() - 5).append(" gi·∫£i ƒë·∫•u kh√°c\n");
            actionButtons.add(new ChatbotResponseDTO.ActionDTO("Xem t·∫•t c·∫£", "action", Map.of("action", "view_all_tournaments")));
        }
        
        actionButtons.add(new ChatbotResponseDTO.ActionDTO("Li√™n h·ªá BTC", "action", Map.of("action", "contact_organizer")));
        
        return new ChatbotResponseDTO(response.toString(), actionButtons, sessionId, entities);
    }
    
    private String createTournamentScheduleText(TournamentDto tournament) {
        return "üìÖ L·ªãch thi ƒë·∫•u: " + tournament.getName() + "\n\n" +
                "üèÅ B·∫Øt ƒë·∫ßu: " + formatDateTime(tournament.getStartDate()) + "\n" +
                "üèÅ K·∫øt th√∫c: " + formatDateTime(tournament.getEndDate()) + "\n" +
                "üìç ƒê·ªãa ƒëi·ªÉm: " + tournament.getLocation().getName() + "\n" +
                "üìç ƒê·ªãa ch·ªâ: " + tournament.getLocation().getAddress() + "\n" +
                "üí∞ Ph√≠ tham gia: " + formatPrice(tournament.getEntryFee().doubleValue()) + "\n" +
                "üéÅ Gi·∫£i th∆∞·ªüng: " + formatPrice(tournament.getPrize().doubleValue()) + "\n" +
                "üë• S·ªë ƒë·ªôi t·ªëi ƒëa: " + tournament.getSlots() + "\n" +
                "üìä Tr·∫°ng th√°i: " + formatStatus(tournament.getStatus());
    }
    
    private String createTournamentFeeText(TournamentDto tournament) {
        return "üí∞ Ph√≠ tham gia: " + tournament.getName() + "\n\n" +
                "üíµ L·ªá ph√≠: " + formatPrice(tournament.getEntryFee().doubleValue()) + "\n" +
                "üéÅ Gi·∫£i th∆∞·ªüng: " + formatPrice(tournament.getPrize().doubleValue()) + "\n" +
                "üìç ƒê·ªãa ƒëi·ªÉm: " + tournament.getLocation().getName() + "\n" +
                "üìÖ Th·ªùi gian: " + formatTournamentDate(tournament) + "\n" +
                "üë• S·ªë ƒë·ªôi: " + tournament.getSlots() + "\n\n" +
                "üí° Ph√≠ bao g·ªìm: Tham gia thi ƒë·∫•u, gi·∫£i th∆∞·ªüng, v√† c√°c ti·ªán √≠ch t·∫°i s√¢n.";
    }
    
    private String createTournamentPrizeText(TournamentDto tournament) {
        return "üéÅ Gi·∫£i th∆∞·ªüng: " + tournament.getName() + "\n\n" +
                "üèÜ T·ªïng gi·∫£i th∆∞·ªüng: " + formatPrice(tournament.getPrize().doubleValue()) + "\n" +
                "üí∞ Ph√≠ tham gia: " + formatPrice(tournament.getEntryFee().doubleValue()) + "\n" +
                "üìç ƒê·ªãa ƒëi·ªÉm: " + tournament.getLocation().getName() + "\n" +
                "üìÖ Th·ªùi gian: " + formatTournamentDate(tournament) + "\n" +
                "üë• S·ªë ƒë·ªôi: " + tournament.getSlots() + "\n\n" +
                "üèÖ C∆° c·∫•u gi·∫£i th∆∞·ªüng s·∫Ω ƒë∆∞·ª£c c√¥ng b·ªë chi ti·∫øt khi gi·∫£i ƒë·∫•u b·∫Øt ƒë·∫ßu.";
    }
    
    private ChatbotResponseDTO createTournamentFeeListResponse(String sessionId, List<TournamentDto> tournaments, Map<String, Object> entities) {
        StringBuilder response = new StringBuilder("üí∞ B·∫£ng ph√≠ tham gia c√°c gi·∫£i ƒë·∫•u:\n\n");
        List<ChatbotResponseDTO.ActionDTO> actionButtons = new ArrayList<>();
        
        int count = Math.min(tournaments.size(), 5);
        
        for (int i = 0; i < count; i++) {
            TournamentDto tournament = tournaments.get(i);
            response.append("üèÜ ").append(tournament.getName()).append("\n");
            response.append("üíµ Ph√≠: ").append(formatPrice(tournament.getEntryFee().doubleValue())).append("\n");
            response.append("üéÅ Th∆∞·ªüng: ").append(formatPrice(tournament.getPrize().doubleValue())).append("\n\n");
            
            actionButtons.add(new ChatbotResponseDTO.ActionDTO("Chi ti·∫øt " + tournament.getName(), "action", Map.of("action", "view_tournament_details_" + tournament.getTournamentId())));
        }
        
        actionButtons.add(new ChatbotResponseDTO.ActionDTO("So s√°nh gi·∫£i ƒë·∫•u", "action", Map.of("action", "compare_tournaments")));
        
        return new ChatbotResponseDTO(response.toString(), actionButtons, sessionId, entities);
    }
    
    private ChatbotResponseDTO createTournamentPrizeListResponse(String sessionId, List<TournamentDto> tournaments, Map<String, Object> entities) {
        StringBuilder response = new StringBuilder("üéÅ Gi·∫£i th∆∞·ªüng c√°c tournament:\n\n");
        List<ChatbotResponseDTO.ActionDTO> actionButtons = new ArrayList<>();
        
        int count = Math.min(tournaments.size(), 5);
        
        for (int i = 0; i < count; i++) {
            TournamentDto tournament = tournaments.get(i);
            response.append("üèÜ ").append(tournament.getName()).append("\n");
            response.append("üéÅ Gi·∫£i th∆∞·ªüng: ").append(formatPrice(tournament.getPrize().doubleValue())).append("\n");
            response.append("üìÖ Th·ªùi gian: ").append(formatTournamentDate(tournament)).append("\n\n");
            
            actionButtons.add(new ChatbotResponseDTO.ActionDTO("ƒêƒÉng k√Ω " + tournament.getName(), "action", Map.of("action", "register_tournament_" + tournament.getTournamentId())));
        }
        
        actionButtons.add(new ChatbotResponseDTO.ActionDTO("Xem t·∫•t c·∫£ gi·∫£i ƒë·∫•u", "action", Map.of("action", "view_all_tournaments")));
        
        return new ChatbotResponseDTO(response.toString(), actionButtons, sessionId, entities);
    }
    
    private String formatTournamentDate(TournamentDto tournament) {
        if (tournament.getStartDate() != null && tournament.getEndDate() != null) {
            return formatDateTime(tournament.getStartDate()) + " - " + formatDateTime(tournament.getEndDate());
        } else if (tournament.getStartDate() != null) {
            return "T·ª´ " + formatDateTime(tournament.getStartDate());
        }
        return "Ch∆∞a x√°c ƒë·ªãnh";
    }
    
    private String formatDateTime(java.time.LocalDateTime dateTime) {
        if (dateTime == null) return "Ch∆∞a x√°c ƒë·ªãnh";
        
        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        return dateTime.format(formatter);
    }
    
    private String formatStatus(String status) {
        if (status == null) return "Ch∆∞a x√°c ƒë·ªãnh";
        
        switch (status.toUpperCase()) {
            case "ACTIVE":
                return "ƒêang m·ªü ƒëƒÉng k√Ω";
            case "UPCOMING":
                return "S·∫Øp di·ªÖn ra";
            case "ONGOING":
                return "ƒêang di·ªÖn ra";
            case "COMPLETED":
                return "ƒê√£ k·∫øt th√∫c";
            case "CANCELLED":
                return "ƒê√£ h·ªßy";
            default:
                return status;
        }
    }
    
    private String formatPrice(Double price) {
        if (price == null) return "Mi·ªÖn ph√≠";
        return String.format("%,.0f VNƒê", price);
    }
}