package fpt.aptech.management_field.services;

import fpt.aptech.management_field.models.Field;
import fpt.aptech.management_field.models.Location;
import fpt.aptech.management_field.payload.dtos.AiRequestDTO;
import fpt.aptech.management_field.payload.dtos.AiResponseDTO;
import fpt.aptech.management_field.repositories.FieldRepository;
import fpt.aptech.management_field.repositories.LocationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
public class ChatbotService {

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private FieldRepository fieldRepository;

    @Autowired
    private LocationRepository locationRepository;

    @Value("${ai.service.url:http://localhost:5001}")
    private String aiServiceUrl;

    public String getResponse(String userMessage) {
        try {
            // G·ªçi AI Service ƒë·ªÉ nh·∫≠n di·ªán intent
            AiRequestDTO request = new AiRequestDTO();
            request.setMessage(userMessage);
            String url = aiServiceUrl + "/predict";
            
            AiResponseDTO aiResponse = restTemplate.postForObject(url, request, AiResponseDTO.class);
            
            if (aiResponse == null) {
                return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.";
            }

            // X·ª≠ l√Ω logic nghi·ªáp v·ª• d·ª±a tr√™n intent
            return processIntent(aiResponse, userMessage);
            
        } catch (Exception e) {
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }

    private String processIntent(AiResponseDTO aiResponse, String userMessage) {
        String intent = aiResponse.getIntent();
        
        switch (intent) {
            case "price_inquiry":
                return handlePriceInquiry(userMessage);
            
            case "location_inquiry":
                return handleLocationInquiry();
            
            case "operating_hours":
                return handleOperatingHours();
            
            case "availability_inquiry":
                return handleAvailabilityInquiry();
            
            case "amenities_inquiry":
                return handleAmenitiesInquiry();
            
            case "booking_management":
                return handleBookingManagement();
            
            case "payment_methods":
                return handlePaymentMethods();
            
            case "fallback":
                return aiResponse.getResponse();
            
            default:
                // C√°c intent tƒ©nh nh∆∞ greeting, thanks, goodbye
                return aiResponse.getResponse();
        }
    }

    private String handlePriceInquiry(String userMessage) {
        try {
            // Ph√¢n t√≠ch t·ª´ kh√≥a trong tin nh·∫Øn
            String fieldType = extractFieldType(userMessage);
            
            if (fieldType != null) {
                List<Field> fields = fieldRepository.findAll().stream()
                .filter(field -> field.getType() != null && 
                        field.getType().getName().toLowerCase().contains(fieldType.toLowerCase()))
                .collect(Collectors.toList());
                
                if (!fields.isEmpty()) {
                    Field field = fields.get(0);
                    return String.format("D·∫°, s√¢n %s c√≥ gi√° l√† %,.0f VNƒê/gi·ªù ·∫°. B·∫°n c√≥ mu·ªën xem th√™m th√¥ng tin v·ªÅ s√¢n n√†y kh√¥ng?", 
                        fieldType, field.getHourlyRate());
                } else {
                    return "Hi·ªán t·∫°i ch√∫ng t√¥i ch∆∞a c√≥ th√¥ng tin gi√° cho lo·∫°i s√¢n n√†y. B·∫°n c√≥ th·ªÉ li√™n h·ªá tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt.";
                }
            } else {
                // Tr·∫£ v·ªÅ b·∫£ng gi√° t·ªïng qu√°t
                List<Field> allFields = fieldRepository.findAll();
                if (!allFields.isEmpty()) {
                    StringBuilder priceList = new StringBuilder("B·∫£ng gi√° c√°c s√¢n c·ªßa ch√∫ng t√¥i:\n");
                    allFields.stream()
                        .limit(5) // Gi·ªõi h·∫°n 5 s√¢n ƒë·∫ßu ti√™n
                        .forEach(field -> priceList.append(String.format("- %s: %,.0f VNƒê/gi·ªù\n", 
                            field.getType().getName(), field.getHourlyRate())));
                    priceList.append("B·∫°n c√≥ mu·ªën xem chi ti·∫øt v·ªÅ s√¢n n√†o kh√¥ng?");
                    return priceList.toString();
                }
            }
        } catch (Exception e) {
            // Log error here
        }
        
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin gi√° l√∫c n√†y. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n.";
    }

    private String handleLocationInquiry() {
        try {
            List<Location> locations = locationRepository.findAll();
            
            if (!locations.isEmpty()) {
                StringBuilder locationList = new StringBuilder("Danh s√°ch ƒë·ªãa ch·ªâ c√°c s√¢n c·ªßa ch√∫ng t√¥i:\n");
                locations.stream()
                   // Gi·ªõi h·∫°n 5 ƒë·ªãa ƒëi·ªÉm ƒë·∫ßu ti√™n
                    .forEach(location -> locationList.append(String.format("üìç %s - %s\n", 
                        location.getName(), location.getAddress())));
                locationList.append("B·∫°n mu·ªën xem chi ti·∫øt v·ªÅ ƒë·ªãa ƒëi·ªÉm n√†o?");
                return locationList.toString();
            }
        } catch (Exception e) {
            // Log error here
        }
        
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë·ªãa ch·ªâ l√∫c n√†y. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.";
    }

    private String handleOperatingHours() {
        return "üïê Gi·ªù ho·∫°t ƒë·ªông c·ªßa ch√∫ng t√¥i:\n" +
               "- Th·ª© 2 - Th·ª© 6: 6:00 - 22:00\n" +
               "- Th·ª© 7 - Ch·ªß nh·∫≠t: 5:30 - 23:00\n" +
               "- L·ªÖ T·∫øt: 7:00 - 21:00\n\n" +
               "B·∫°n c√≥ mu·ªën ƒë·∫∑t s√¢n trong khung gi·ªù n√†o kh√¥ng?";
    }

    private String handleAvailabilityInquiry() {
        return "ƒê·ªÉ ki·ªÉm tra l·ªãch tr·ªëng, b·∫°n vui l√≤ng:\n" +
               "1. Truy c·∫≠p trang web c·ªßa ch√∫ng t√¥i\n" +
               "2. Ch·ªçn s√¢n v√† ng√†y mu·ªën ƒë·∫∑t\n" +
               "3. H·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã c√°c khung gi·ªù c√≤n tr·ªëng\n\n" +
               "Ho·∫∑c b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c·ª• th·ªÉ ng√†y v√† gi·ªù mu·ªën ƒë·∫∑t ƒë·ªÉ t√¥i h·ªó tr·ª£ ki·ªÉm tra.";
    }

    private String handleAmenitiesInquiry() {
        return "üèüÔ∏è Ti·ªán √≠ch t·∫°i s√¢n c·ªßa ch√∫ng t√¥i:\n" +
               "‚úÖ Cho thu√™ b√≥ng v√† d·ª•ng c·ª• th·ªÉ thao\n" +
               "‚úÖ B√£i ƒë·ªó xe mi·ªÖn ph√≠\n" +
               "‚úÖ N∆∞·ªõc u·ªëng v√† ƒë·ªì ƒÉn nh·∫π\n" +
               "‚úÖ WiFi mi·ªÖn ph√≠\n" +
               "‚úÖ Ph√≤ng thay ƒë·ªì v√† t·∫Øm r·ª≠a\n" +
               "‚úÖ Cho thu√™ gi√†y th·ªÉ thao\n\n" +
               "B·∫°n c√≥ c·∫ßn th√™m th√¥ng tin v·ªÅ ti·ªán √≠ch n√†o kh√¥ng?";
    }

    private String handleBookingManagement() {
        return "üìã Qu·∫£n l√Ω ƒë·∫∑t s√¢n:\n" +
               "‚Ä¢ H·ªßy s√¢n: C√≥ th·ªÉ h·ªßy tr∆∞·ªõc 2 gi·ªù, ho√†n 80% ti·ªÅn\n" +
               "‚Ä¢ ƒê·ªïi gi·ªù: Li√™n h·ªá tr∆∞·ªõc 1 gi·ªù ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£\n" +
               "‚Ä¢ Xem l·ªãch s·ª≠: ƒêƒÉng nh·∫≠p t√†i kho·∫£n > L·ªãch s·ª≠ ƒë·∫∑t s√¢n\n\n" +
               "B·∫°n c·∫ßn h·ªó tr·ª£ thao t√°c n√†o c·ª• th·ªÉ?";
    }

    private String handlePaymentMethods() {
        return "üí≥ C√°c h√¨nh th·ª©c thanh to√°n:\n" +
               "‚úÖ Ti·ªÅn m·∫∑t t·∫°i s√¢n\n" +
               "‚úÖ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n" +
               "‚úÖ V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay)\n" +
               "‚úÖ Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n" +
               "‚úÖ PayPal\n\n" +
               "B·∫°n mu·ªën thanh to√°n b·∫±ng h√¨nh th·ª©c n√†o?";
    }

    private String extractFieldType(String message) {
        String lowerMessage = message.toLowerCase();
        
        // Patterns ƒë·ªÉ nh·∫≠n di·ªán lo·∫°i s√¢n
        if (lowerMessage.contains("s√¢n 5") || lowerMessage.contains("5 ng∆∞·ªùi")) {
            return "S√¢n 5 ng∆∞·ªùi";
        }
        if (lowerMessage.contains("s√¢n 7") || lowerMessage.contains("7 ng∆∞·ªùi")) {
            return "S√¢n 7 ng∆∞·ªùi";
        }
        if (lowerMessage.contains("s√¢n 11") || lowerMessage.contains("11 ng∆∞·ªùi")) {
            return "S√¢n 11 ng∆∞·ªùi";
        }
        if (lowerMessage.contains("c·∫ßu l√¥ng") || lowerMessage.contains("badminton")) {
            return "C·∫ßu l√¥ng";
        }
        if (lowerMessage.contains("tennis")) {
            return "Tennis";
        }
        if (lowerMessage.contains("b√≥ng r·ªï") || lowerMessage.contains("basketball")) {
            return "B√≥ng r·ªï";
        }
        
        return null;
    }
}