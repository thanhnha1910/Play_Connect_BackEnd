package fpt.aptech.management_field.services;

import fpt.aptech.management_field.models.ChatRoom;
import fpt.aptech.management_field.models.ChatMember;
import fpt.aptech.management_field.models.ChatMessage;
import fpt.aptech.management_field.models.User;
import fpt.aptech.management_field.models.Notification;
import fpt.aptech.management_field.payload.dtos.ChatMessageDTO;
import fpt.aptech.management_field.payload.dtos.ChatMemberDTO;
import fpt.aptech.management_field.payload.dtos.ChatRoomDTO;
import fpt.aptech.management_field.repositories.ChatRoomRepository;
import fpt.aptech.management_field.repositories.ChatMessageRepository;
import fpt.aptech.management_field.repositories.ChatMemberRepository;
import fpt.aptech.management_field.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ChatRoomService {

    @Autowired
    private ChatRoomRepository chatRoomRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ChatMessageRepository chatMessageRepository;

    @Autowired
    private ChatMemberRepository chatMemberRepository;

    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    @Autowired
    private NotificationService notificationService;

    @Transactional
    public ChatRoom createChatRoom(String name, Long creatorUserId) {
        if (name == null || name.trim().isEmpty() || name.length() < 3) {
            throw new RuntimeException("T√™n ph√≤ng chat ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±");
        }
        if (chatRoomRepository.findByName(name).isPresent()) {
            throw new RuntimeException("T√™n ph√≤ng chat ƒë√£ t·ªìn t·∫°i");
        }
        User creator = userRepository.findById(creatorUserId)
                .orElseThrow(() -> new RuntimeException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));

        ChatRoom chatRoom = new ChatRoom();
        chatRoom.setName(name);
        chatRoom.setCreatedAt(LocalDateTime.now());

        // L∆∞u ChatRoom tr∆∞·ªõc
        chatRoom = chatRoomRepository.save(chatRoom);

        // T·∫°o ChatMember cho ng∆∞·ªùi t·∫°o
        ChatMember creatorMember = new ChatMember();
        creatorMember.setChatRoom(chatRoom);
        creatorMember.setUser(creator);
        creatorMember.setAdmin(true);
        creatorMember.setCreator(true);
        creatorMember.setActive(true);
        creatorMember.setJoinedAt(LocalDateTime.now());
        chatMemberRepository.save(creatorMember);

        // G·ª≠i th√¥ng b√°o qua WebSocket
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoom.getId(),
                new ChatMessageDTO(0L, 0L, "System", "Ph√≤ng chat " + chatRoom.getName() + " ƒë√£ ƒë∆∞·ª£c t·∫°o", LocalDateTime.now()));

        return chatRoom;
    }

    @Transactional
    public void addMember(Long chatRoomId, String phoneNumber, Long adminUserId) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        // Ki·ªÉm tra quy·ªÅn - b·∫•t k·ª≥ th√†nh vi√™n n√†o c≈©ng c√≥ th·ªÉ th√™m ng∆∞·ªùi kh√°c
        Optional<ChatMember> memberCheck = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, adminUserId);
        if (memberCheck.isEmpty() || !memberCheck.get().isActive()) {
            throw new RuntimeException("B·∫°n ph·∫£i l√† th√†nh vi√™n c·ªßa ph√≤ng chat ƒë·ªÉ th√™m ng∆∞·ªùi kh√°c");
        }

        User user = userRepository.findByPhoneNumber(phoneNumber)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi s·ªë ƒëi·ªán tho·∫°i: " + phoneNumber));

        // Ki·ªÉm tra xem user ƒë√£ l√† th√†nh vi√™n ch∆∞a
        Optional<ChatMember> existingMember = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, user.getId());
        if (existingMember.isPresent()) {
            throw new RuntimeException("Ng∆∞·ªùi d√πng ƒë√£ l√† th√†nh vi√™n c·ªßa ph√≤ng chat n√†y");
        }

        ChatMember member = new ChatMember();
        member.setChatRoom(chatRoom);
        member.setUser(user);
        member.setAdmin(false);
        member.setActive(true);
        member.setJoinedAt(LocalDateTime.now());

        chatMemberRepository.save(member);

        // T·∫°o notification cho user ƒë∆∞·ª£c th√™m v√†o
        createNotificationForNewChatMember(chatRoom, user);

        // G·ª≠i th√¥ng b√°o qua WebSocket
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                new ChatMessageDTO(0L, user.getId(), user.getFullName(),
                        user.getFullName() + " ƒë√£ ƒë∆∞·ª£c th√™m v√†o ph√≤ng chat", LocalDateTime.now()));
    }

    @Transactional
    public void addMemberByEmail(Long chatRoomId, String email, Long userId) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        // Ki·ªÉm tra quy·ªÅn - b·∫•t k·ª≥ th√†nh vi√™n n√†o c≈©ng c√≥ th·ªÉ th√™m ng∆∞·ªùi kh√°c
        Optional<ChatMember> memberCheck = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userId);
        if (memberCheck.isEmpty() || !memberCheck.get().isActive()) {
            throw new RuntimeException("B·∫°n ph·∫£i l√† th√†nh vi√™n c·ªßa ph√≤ng chat ƒë·ªÉ th√™m ng∆∞·ªùi kh√°c");
        }

        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: " + email));

        // Ki·ªÉm tra xem user ƒë√£ l√† th√†nh vi√™n ch∆∞a
        Optional<ChatMember> existingMember = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, user.getId());
        if (existingMember.isPresent()) {
            throw new RuntimeException("Ng∆∞·ªùi d√πng ƒë√£ l√† th√†nh vi√™n c·ªßa ph√≤ng chat n√†y");
        }

        ChatMember member = new ChatMember();
        member.setChatRoom(chatRoom);
        member.setUser(user);
        member.setAdmin(false);
        member.setActive(true);
        member.setJoinedAt(LocalDateTime.now());

        chatMemberRepository.save(member);

        // T·∫°o notification cho user ƒë∆∞·ª£c th√™m v√†o
        createNotificationForNewChatMember(chatRoom, user);

        // G·ª≠i th√¥ng b√°o qua WebSocket
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                new ChatMessageDTO(0L, user.getId(), user.getFullName(),
                        user.getFullName() + " ƒë√£ ƒë∆∞·ª£c th√™m v√†o ph√≤ng chat", LocalDateTime.now()));
    }

    @Transactional
    public void removeMember(Long chatRoomId, Long userIdToRemove, Long creatorUserId) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        // Ki·ªÉm tra quy·ªÅn creator (ng∆∞·ªùi t·∫°o nh√≥m)
        Optional<ChatMember> creatorMember = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, creatorUserId);
        if (creatorMember.isEmpty() || !creatorMember.get().isCreator()) {
            throw new RuntimeException("Ch·ªâ ng∆∞·ªùi t·∫°o nh√≥m m·ªõi c√≥ th·ªÉ x√≥a th√†nh vi√™n");
        }

        Optional<ChatMember> memberToRemove = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userIdToRemove);
        if (memberToRemove.isEmpty()) {
            throw new RuntimeException("Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa ph√≤ng chat n√†y");
        }

        ChatMember member = memberToRemove.get();
        User removedUser = member.getUser();
        
        chatMemberRepository.delete(member);
        
        // G·ª≠i th√¥ng b√°o qua WebSocket
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                new ChatMessageDTO(0L, removedUser.getId(), removedUser.getFullName(), 
                        removedUser.getFullName() + " ƒë√£ b·ªã x√≥a kh·ªèi ph√≤ng chat b·ªüi admin", LocalDateTime.now()));
    }

    public List<ChatRoom> getUserChatRooms(Long userId) {
        return chatMemberRepository.findActiveChatRoomsByUserId(userId);
    }

    public List<ChatRoomDTO> getUserChatRoomsDTO(Long userId) {
        List<ChatRoom> chatRooms = getUserChatRooms(userId);
        return chatRooms.stream().map(room -> {
            ChatRoomDTO dto = new ChatRoomDTO();
            dto.setId(room.getId());
            dto.setName(room.getName());
            dto.setCreatedAt(room.getCreatedAt());
            
            // L·∫•y tin nh·∫Øn cu·ªëi c√πng
            ChatMessage lastMessage = room.getLastMessage();
            if (lastMessage != null) {
                dto.setLastMessage(lastMessage.getContent());
                dto.setLastMessageTime(lastMessage.getSentAt());
            }
            
            dto.setMemberCount(room.getActiveMemberCount());
            return dto;
        }).collect(Collectors.toList());
    }

    public List<ChatMemberDTO> getChatRoomMembers(Long chatRoomId) {
        System.out.println("üîç DEBUG: Getting members for chatRoomId: " + chatRoomId);
        List<ChatMember> members = chatMemberRepository.findActiveMembersByChatRoomId(chatRoomId);
        System.out.println("üîç DEBUG: Found " + members.size() + " members");
        
        return members.stream().map(member -> {
            ChatMemberDTO dto = new ChatMemberDTO();
            dto.setUserId(member.getUser().getId());
            dto.setUsername(member.getUser().getFullName());
            dto.setEmail(member.getUser().getEmail());
            dto.setAdmin(member.isAdmin());
            dto.setCreator(member.isCreator());
            dto.setJoinedAt(member.getJoinedAt());
            
            System.out.println("üîç DEBUG: Member - ID: " + member.getUser().getId() + 
                             ", Name: " + member.getUser().getFullName() + 
                             ", isAdmin: " + member.isAdmin() + 
                             ", isCreator: " + member.isCreator());
            
            return dto;
        }).collect(Collectors.toList());
    }

    @Transactional
    public ChatMessage sendMessage(Long chatRoomId, Long userId, String content) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† th√†nh vi√™n kh√¥ng
        Optional<ChatMember> member = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userId);
        if (member.isEmpty() || !member.get().isActive()) {
            throw new RuntimeException("B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa ph√≤ng chat n√†y");
        }

        ChatMessage message = new ChatMessage();
        message.setChatRoom(chatRoom);
        message.setUser(user);
        message.setContent(content);
        message.setSentAt(LocalDateTime.now());
        message = chatMessageRepository.save(message);

        // G·ª≠i tin nh·∫Øn qua WebSocket
        ChatMessageDTO messageDTO = new ChatMessageDTO(
                message.getId(),
                user.getId(),
                user.getFullName(),
                content,
                message.getSentAt()
        );

        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId, messageDTO);
        return message;
    }

    public List<ChatMessageDTO> getMessages(Long chatRoomId, Long userId) {
        // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† th√†nh vi√™n kh√¥ng
        Optional<ChatMember> member = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userId);
        if (member.isEmpty() || !member.get().isActive()) {
            throw new RuntimeException("B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa ph√≤ng chat n√†y");
        }

        List<ChatMessage> messages = chatMessageRepository.findByChatRoomIdOrderBySentAtAsc(chatRoomId);
        return messages.stream()
                .map(m -> new ChatMessageDTO(
                        m.getId(),
                        m.getUser().getId(),
                        m.getUser().getFullName(),
                        m.getContent(),
                        m.getSentAt()
                ))
                .collect(Collectors.toList());
    }

    public boolean isUserMemberOfRoom(Long chatRoomId, Long userId) {
        Optional<ChatMember> member = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userId);
        return member.isPresent() && member.get().isActive();
    }

    public boolean isUserAdminOfRoom(Long chatRoomId, Long userId) {
        Optional<ChatMember> member = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userId);
        return member.isPresent() && member.get().isAdmin();
    }

    public boolean isUserCreatorOfRoom(Long chatRoomId, Long userId) {
        Optional<ChatMember> member = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userId);
        return member.isPresent() && member.get().isCreator();
    }

    @Transactional
    public void leaveChatRoom(Long chatRoomId, Long userId) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        Optional<ChatMember> member = chatMemberRepository.findByChatRoomIdAndUserId(chatRoomId, userId);
        if (member.isEmpty()) {
            throw new RuntimeException("B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa ph√≤ng chat n√†y");
        }

        ChatMember chatMember = member.get();
        User user = userRepository.findById(userId).orElse(null);
        String userName = user != null ? user.getFullName() : "Ng∆∞·ªùi d√πng";
        
        // Ki·ªÉm tra n·∫øu l√† creator (ng∆∞·ªùi t·∫°o nh√≥m)
        if (chatMember.isCreator()) {
            // G·ª≠i th√¥ng b√°o tr∆∞·ªõc khi x√≥a
            messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                    new ChatMessageDTO(0L, 0L, "System", "Ph√≤ng chat ƒë√£ b·ªã x√≥a do ng∆∞·ªùi t·∫°o nh√≥m r·ªùi kh·ªèi", LocalDateTime.now()));
            
            // N·∫øu l√† creator, x√≥a to√†n b·ªô ph√≤ng chat
            deleteChatRoomCompletely(chatRoomId);
        } else {
            // X√≥a th√†nh vi√™n kh·ªèi ph√≤ng chat
            chatMemberRepository.delete(chatMember);
            
            // G·ª≠i th√¥ng b√°o qua WebSocket
            messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                    new ChatMessageDTO(0L, userId, userName, userName + " ƒë√£ r·ªùi kh·ªèi ph√≤ng chat", LocalDateTime.now()));
        }
    }

    @Transactional
    public void deleteChatRoom(Long chatRoomId, Long userId) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        // Ki·ªÉm tra quy·ªÅn creator (ng∆∞·ªùi t·∫°o nh√≥m)
        boolean isCreator = isUserCreatorOfRoom(chatRoomId, userId);
        if (!isCreator) {
            throw new RuntimeException("Ch·ªâ ng∆∞·ªùi t·∫°o nh√≥m m·ªõi c√≥ th·ªÉ x√≥a ph√≤ng chat");
        }

        // G·ª≠i th√¥ng b√°o tr∆∞·ªõc khi x√≥a
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                new ChatMessageDTO(0L, 0L, "System", "Ph√≤ng chat s·∫Ω b·ªã x√≥a b·ªüi ng∆∞·ªùi t·∫°o nh√≥m", LocalDateTime.now()));

        // X√≥a to√†n b·ªô ph√≤ng chat
        deleteChatRoomCompletely(chatRoomId);
    }

    @Transactional
    public void clearChatHistory(Long chatRoomId, Long requesterId) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Ph√≤ng chat kh√¥ng t·ªìn t·∫°i"));

        // Ki·ªÉm tra quy·ªÅn x√≥a l·ªãch s·ª≠ (ch·ªâ creator m·ªõi ƒë∆∞·ª£c x√≥a)
        boolean isCreator = isUserCreatorOfRoom(chatRoomId, requesterId);
        if (!isCreator) {
            throw new RuntimeException("Ch·ªâ ng∆∞·ªùi t·∫°o ph√≤ng m·ªõi c√≥ th·ªÉ x√≥a l·ªãch s·ª≠ tin nh·∫Øn");
        }

        // X√≥a t·∫•t c·∫£ tin nh·∫Øn trong ph√≤ng
        chatMessageRepository.deleteByChatRoomId(chatRoomId);

        // G·ª≠i th√¥ng b√°o qua WebSocket
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                new ChatMessageDTO(0L, 0L, "System", "L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a b·ªüi ng∆∞·ªùi t·∫°o ph√≤ng.", LocalDateTime.now()));
    }

    @Transactional
    public void clearChatMessages(Long chatRoomId, Long userId) {
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        // Ki·ªÉm tra quy·ªÅn creator (ng∆∞·ªùi t·∫°o nh√≥m)
        boolean isCreator = isUserCreatorOfRoom(chatRoomId, userId);
        if (!isCreator) {
            throw new RuntimeException("Ch·ªâ ng∆∞·ªùi t·∫°o nh√≥m m·ªõi c√≥ th·ªÉ x√≥a tin nh·∫Øn");
        }

        // X√≥a t·∫•t c·∫£ tin nh·∫Øn
        chatMessageRepository.deleteByChatRoomId(chatRoomId);

        // G·ª≠i th√¥ng b√°o
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId,
                new ChatMessageDTO(0L, 0L, "System", "T·∫•t c·∫£ tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a b·ªüi ng∆∞·ªùi t·∫°o nh√≥m", LocalDateTime.now()));
    }

    @Transactional
    public void deleteMessage(Long chatRoomId, Long messageId, Long userId) {
        // Ki·ªÉm tra ph√≤ng chat t·ªìn t·∫°i
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));

        // Ki·ªÉm tra tin nh·∫Øn t·ªìn t·∫°i
        ChatMessage message = chatMessageRepository.findById(messageId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tin nh·∫Øn"));

        // Ki·ªÉm tra tin nh·∫Øn thu·ªôc ph√≤ng chat n√†y
        if (!message.getChatRoom().getId().equals(chatRoomId)) {
            throw new RuntimeException("Tin nh·∫Øn kh√¥ng thu·ªôc ph√≤ng chat n√†y");
        }

        // Ki·ªÉm tra quy·ªÅn x√≥a: ng∆∞·ªùi g·ª≠i ho·∫∑c ng∆∞·ªùi t·∫°o nh√≥m
        boolean isMessageSender = message.getUser().getId().equals(userId);
        boolean isCreator = isUserCreatorOfRoom(chatRoomId, userId);
        
        if (!isMessageSender && !isCreator) {
            throw new RuntimeException("B·∫°n ch·ªâ c√≥ th·ªÉ x√≥a tin nh·∫Øn c·ªßa ch√≠nh m√¨nh ho·∫∑c n·∫øu b·∫°n l√† ng∆∞·ªùi t·∫°o nh√≥m");
        }

        // X√≥a tin nh·∫Øn
        chatMessageRepository.delete(message);

        // G·ª≠i th√¥ng b√°o qua WebSocket
        User user = userRepository.findById(userId).orElse(null);
        String userName = user != null ? user.getFullName() : "Ng∆∞·ªùi d√πng";
        String notificationMessage = isMessageSender ? 
            userName + " ƒë√£ x√≥a tin nh·∫Øn c·ªßa m√¨nh" : 
            "Tin nh·∫Øn ƒë√£ b·ªã x√≥a b·ªüi qu·∫£n tr·ªã vi√™n";
            
        messagingTemplate.convertAndSend("/topic/chatrooms/" + chatRoomId + "/delete",
                Map.of("messageId", messageId, "notification", notificationMessage));
    }

    @Transactional
    private void deleteChatRoomCompletely(Long chatRoomId) {
        // L·∫•y ChatRoom entity ƒë·ªÉ Hibernate c√≥ th·ªÉ cascade delete ƒë√∫ng c√°ch
        ChatRoom chatRoom = chatRoomRepository.findById(chatRoomId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng chat"));
        
        // X√≥a ph√≤ng chat - Hibernate s·∫Ω t·ª± ƒë·ªông cascade delete messages v√† members
        // do c√≥ annotation cascade = CascadeType.ALL v√† orphanRemoval = true
        chatRoomRepository.delete(chatRoom);
    }

    private void createNotificationForNewChatMember(ChatRoom chatRoom, User user) {
        Notification notification = new Notification();
        notification.setRecipient(user);
        notification.setTitle("B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o ph√≤ng chat");
        notification.setContent(String.format("B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o ph√≤ng chat '%s'. H√£y tham gia tr√≤ chuy·ªán ngay!", 
                chatRoom.getName()));
        notification.setType("CHAT_INVITATION");
        notification.setRelatedEntityId(chatRoom.getId());
        notification.setCreatedAt(LocalDateTime.now());
        notification.setIsRead(false);
        
        notificationService.createNotification(notification);
    }
}